comment: '''
  Based heavily on the Java bundle's language syntax. TODO:
  * Closures (In progress)
  * Delegates
  * Annotations
  * Error domains
  * Named arguments
  * Array slicing, negative indexes, multidimensional
  * construct blocks
  * lock blocks?
  * regex literals
  * DocBlock syntax highlighting. (Currently importing javadoc)
  * Folding rule for comments.
'''
fileTypes: [
  "vala"
  "vapi"
]
foldingStartMarker: "(\\{\\s*(//.*)?$|^\\s*// \\{\\{\\{)"
foldingStopMarker: "^\\s*(\\}|// \\}\\}\\}$)"
name: "Vala"
patterns: [
  {
    captures:
      "1":
        name: "keyword.other.using.vala"
      "2":
        name: "storage.modifier.using.vala"
      "3":
        name: "punctuation.terminator.vala"
    match: "^\\s*(using)\\b(?:\\s*([^ ;$]+)\\s*(;)?)?"
    name: "meta.using.vala"
  }
  {
    include: "#code"
  }
]
repository:
  "all-types":
    patterns: [
      {
        include: "#primitive-arrays"
      }
      {
        include: "#primitive-types"
      }
      {
        include: "#object-types"
      }
    ]
  annotations:
    patterns: [
      {
        begin: "(@[^ (]+)(\\()"
        beginCaptures:
          "1":
            name: "storage.type.annotation.vala"
          "2":
            name: "punctuation.definition.annotation-arguments.begin.vala"
        end: "(\\))"
        endCaptures:
          "1":
            name: "punctuation.definition.annotation-arguments.end.vala"
        name: "meta.declaration.annotation.vala"
        patterns: [
          {
            captures:
              "1":
                name: "constant.other.key.vala"
              "2":
                name: "keyword.operator.assignment.vala"
            match: "(\\w*)\\s*(=)"
          }
          {
            include: "#code"
          }
          {
            match: ","
            name: "punctuation.seperator.property.vala"
          }
        ]
      }
      {
        match: "@\\w*"
        name: "storage.type.annotation.vala"
      }
    ]
  "anonymous-classes-and-new":
    begin: "\\bnew\\b"
    beginCaptures:
      "0":
        name: "keyword.control.new.vala"
    end: "(?<=\\)|\\])(?!\\s*{)|(?<=})|(?=;)"
    patterns: [
      {
        begin: "(\\w+)\\s*(?=\\[)"
        beginCaptures:
          "1":
            name: "storage.type.vala"
        end: "}|(?=;|\\))"
        patterns: [
          {
            begin: "\\["
            end: "\\]"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "{"
            end: "(?=})"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
        ]
      }
      {
        begin: "(?=\\w.*\\()"
        end: "(?<=\\))"
        patterns: [
          {
            include: "#object-types"
          }
          {
            begin: "\\("
            beginCaptures:
              "1":
                name: "storage.type.vala"
            end: "\\)"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
        ]
      }
      {
        begin: "{"
        end: "}"
        name: "meta.inner-class.vala"
        patterns: [
          {
            include: "#class-body"
          }
        ]
      }
    ]
  assertions:
    patterns: [
      {
        begin: "\\b(assert|requires|ensures)\\s"
        beginCaptures:
          "1":
            name: "keyword.control.assert.vala"
        end: "$"
        name: "meta.declaration.assertion.vala"
        patterns: [
          {
            match: ":"
            name: "keyword.operator.assert.expression-seperator.vala"
          }
          {
            include: "#code"
          }
        ]
      }
    ]
  class:
    begin: "(?=\\w?[\\w\\s]*(?:class|(?:@)?interface|enum|struct|namespace)\\s+\\w+)"
    comment: "attempting to put namespace in here."
    end: "}"
    endCaptures:
      "0":
        name: "punctuation.section.class.end.vala"
    name: "meta.class.vala"
    patterns: [
      {
        include: "#storage-modifiers"
      }
      {
        include: "#comments"
      }
      {
        captures:
          "1":
            name: "storage.modifier.vala"
          "2":
            name: "entity.name.type.class.vala"
        match: "(class|(?:@)?interface|enum|struct|namespace)\\s+([\\w\\.]+)"
        name: "meta.class.identifier.vala"
      }
      {
        begin: ":"
        beginCaptures:
          "0":
            name: "storage.modifier.extends.vala"
        end: "(?={|,)"
        name: "meta.definition.class.inherited.classes.vala"
        patterns: [
          {
            include: "#object-types-inherited"
          }
          {
            include: "#comments"
          }
        ]
      }
      {
        begin: "(,)\\s"
        beginCaptures:
          "1":
            name: "storage.modifier.implements.vala"
        end: "(?=\\{)"
        name: "meta.definition.class.implemented.interfaces.vala"
        patterns: [
          {
            include: "#object-types-inherited"
          }
          {
            include: "#comments"
          }
        ]
      }
      {
        begin: "{"
        end: "(?=})"
        name: "meta.class.body.vala"
        patterns: [
          {
            include: "#class-body"
          }
        ]
      }
    ]
  "class-body":
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#class"
      }
      {
        include: "#enums"
      }
      {
        include: "#annotations"
      }
      {
        include: "#storage-modifiers"
      }
      {
        include: "#objects"
      }
      {
        include: "#properties"
      }
      {
        include: "#methods"
      }
      {
        include: "#code"
      }
    ]
  code:
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#class"
      }
      {
        begin: "{"
        end: "}"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
      {
        include: "#assertions"
      }
      {
        include: "#parens"
      }
      {
        include: "#constants-and-special-vars"
      }
      {
        include: "#anonymous-classes-and-new"
      }
      {
        include: "#keywords"
      }
      {
        include: "#storage-modifiers"
      }
      {
        include: "#strings"
      }
      {
        include: "#all-types"
      }
      {
        include: "#objects"
      }
      {
        include: "#properties"
      }
      {
        include: "#methods"
      }
    ]
  comments:
    patterns: [
      {
        captures:
          "0":
            name: "punctuation.definition.comment.vala"
        match: "/\\*\\*/"
        name: "comment.block.empty.vala"
      }
      {
        include: "text.html.javadoc"
      }
      {
        include: "#comments-inline"
      }
    ]
  "comments-inline":
    patterns: [
      {
        begin: "/\\*"
        captures:
          "0":
            name: "punctuation.definition.comment.vala"
        end: "\\*/"
        name: "comment.block.vala"
      }
      {
        captures:
          "1":
            name: "comment.line.double-slash.vala"
          "2":
            name: "punctuation.definition.comment.vala"
        match: "\\s*((//).*$\\n?)"
      }
    ]
  "constants-and-special-vars":
    patterns: [
      {
        match: "\\b(true|false|null)\\b"
        name: "constant.language.vala"
      }
      {
        match: "\\b(this|base)\\b"
        name: "variable.language.vala"
      }
      {
        match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\\b"
        name: "constant.numeric.vala"
      }
      {
        captures:
          "1":
            name: "keyword.operator.dereference.vala"
        match: "(\\.)?\\b([A-Z][A-Z0-9_]+)(?!<|\\.class|\\s*\\w+\\s*=)\\b"
        name: "constant.other.vala"
      }
    ]
  enums:
    begin: "^(?=\\s*[A-Z0-9_]+\\s*({|\\(|,))"
    end: "(?=;|})"
    patterns: [
      {
        include: "#comments"
      }
      {
        begin: "\\w+"
        beginCaptures:
          "0":
            name: "constant.other.enum.vala"
        end: "(?=,|;|})"
        name: "meta.enum.vala"
        patterns: [
          {
            include: "#parens"
          }
          {
            begin: "{"
            end: "}"
            patterns: [
              {
                include: "#class-body"
              }
            ]
          }
        ]
      }
    ]
  keywords:
    patterns: [
      {
        match: "\\b(try|catch|finally|throw)\\b"
        name: "keyword.control.catch-exception.vala"
      }
      {
        match: "\\?|:|\\?\\?"
        name: "keyword.control.vala"
      }
      {
        match: "\\b(return|break|case|continue|default|do|while|for|foreach|switch|if|else|in|yield|get|set|value|construct)\\b"
        name: "keyword.control.vala"
      }
      {
        match: "\\b(typeof|is|as)\\b"
        name: "keyword.operator.vala"
      }
      {
        match: "(==|!=|<=|>=|<>|<|>)"
        name: "keyword.operator.comparison.vala"
      }
      {
        match: "(=>*)"
        name: "keyword.operator.assignment.vala"
      }
      {
        match: "(\\-\\-|\\+\\+)"
        name: "keyword.operator.increment-decrement.vala"
      }
      {
        match: "(\\-|\\+|\\*|\\/|%)"
        name: "keyword.operator.arithmetic.vala"
      }
      {
        match: "(!|&&|\\|\\|)"
        name: "keyword.operator.logical.vala"
      }
      {
        match: "(?<=\\S)\\.(?=\\S)"
        name: "keyword.operator.dereference.vala"
      }
      {
        match: ";"
        name: "punctuation.terminator.vala"
      }
      {
        match: "(owned|unowned)"
        name: "keyword.operator.ownership"
      }
      {
        name: "keyword.vala"
        match: "(?<=^|[^@\\w\\.])(as|do|if|in|is|for|get|new|out|ref|set|try|var|base|case|else|enum|lock|null|this|true|void|weak|async|break|catch|class|const|false|owned|throw|using|while|yield|delete|extern|inline|params|public|return|sealed|signal|sizeof|static|struct|switch|throws|typeof|unlock|default|dynamic|ensures|finally|foreach|private|unowned|virtual|abstract|continue|delegate|internal|override|requires|volatile|construct|interface|namespace|protected|errordomain)\\b"
      }
      {
        name: "keyword.vala"
        match: "(?<=^|[^@\\w\\.])(bool|double|float|unichar|char|uchar|int|uint|long|ulong|short|ushort|size_t|ssize_t|string|void|signal|int8|int16|int32|int64|uint8|uint16|uint32|uint64)\\b"
      }
      {
        match: "(#if|#else|#endif)"
        name: "keyword.vala"
      }
    ]
  methods:
    begin: "(?!new)(?=\\w.*\\s+)(?=[^=]+\\()"
    end: "}|(?=;)"
    name: "meta.method.vala"
    patterns: [
      {
        include: "#storage-modifiers"
      }
      {
        include: "#objects"
      }
      {
        include: "#properties"
      }
      {
        begin: "([\\~\\w]+)\\s*\\("
        beginCaptures:
          "1":
            name: "entity.name.function.vala"
        end: "\\)"
        name: "meta.method.identifier.vala"
        patterns: [
          {
            include: "#values"
          }
          {
            include: "#parameters"
          }
        ]
      }
      {
        begin: "(?=\\w.*\\s+\\w+\\s*\\()"
        end: "(?=\\w+\\s*\\()"
        name: "meta.method.return-type.vala"
        patterns: [
          {
            include: "#all-types"
          }
        ]
      }
      {
        include: "#throws"
      }
      {
        begin: "{"
        end: "(?=})"
        name: "meta.method.body.vala"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
    ]
  namespace:
    begin: "^(?=\\s*[A-Z0-9_]+\\s*({|\\(|,))"
    comment: "This is not quite right. See the class grammar right now"
    end: "(?=;|})"
    patterns: [
      {
        begin: "\\w+"
        beginCaptures:
          "0":
            name: "constant.other.namespace.vala"
        end: "(?=,|;|})"
        name: "meta.namespace.vala"
        patterns: [
          {
            include: "#parens"
          }
          {
            begin: "{"
            end: "}"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
        ]
      }
    ]
  objects:
    patterns: [
      {
        # OBJ in OBJ.prop, OBJ.methodCall()
        match: '^[^.][A-Z][A-Z0-9_]*(?=\\s*\\.\\s*[a-zA-Z_][a-zA-Z0-9_]*)'
        name: 'constant.other.object.vala'
      }
      {
        # obj in obj.prop, obj.methodCall()
        match: '^[^.][a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\.\\s*[a-zA-Z_][a-zA-Z0-9_]*)'
        name: 'variable.other.object.vala'
      }
    ]
  "object-types":
    patterns: [
      {
        begin: "\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)<"
        end: ">|[^\\w\\s,\\.\\?<\\[\\]]"
        name: "storage.type.generic.vala"
        patterns: [
          {
            include: "#object-types"
          }
          {
            begin: "<"
            comment: "This is just to support <>'s with no actual type prefix"
            end: ">|[^\\w\\s,\\[\\]<]"
            name: "storage.type.generic.vala"
          }
        ]
      }
      {
        begin: "\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)(?=\\[)"
        end: "(?=[^\\]\\s])"
        name: "storage.type.object.array.vala"
        patterns: [
          {
            begin: "\\["
            end: "\\]"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
        ]
      }
      {
        captures:
          "1":
            name: "keyword.operator.dereference.vala"
        match: "\\b(?:[a-z]\\w*(\\.))*[A-Z]+\\w*\\b"
        name: "storage.type.vala"
      }
    ]
  "object-types-inherited":
    patterns: [
      {
        begin: "\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)<"
        end: ">|[^\\w\\s,<]"
        name: "entity.other.inherited-class.vala"
        patterns: [
          {
            include: "#object-types"
          }
          {
            begin: "<"
            comment: "This is just to support <>'s with no actual type prefix"
            end: ">|[^\\w\\s,<]"
            name: "storage.type.generic.vala"
          }
        ]
      }
      {
        captures:
          "1":
            name: "keyword.operator.dereference.vala"
        match: "\\b(?:[a-z]\\w*(\\.))*[A-Z]+\\w*"
        name: "entity.other.inherited-class.vala"
      }
    ]
  parameters:
    patterns: [
      {
        match: "final"
        name: "storage.modifier.vala"
      }
      {
        include: "#primitive-arrays"
      }
      {
        include: "#primitive-types"
      }
      {
        include: "#object-types"
      }
      {
        include: "#objects"
      }
      {
        include: "#properties"
      }
      {
        include: "#methods"
      }
      {
        match: "\\w+"
        name: "variable.parameter.vala"
      }
    ]
  parens:
    begin: "\\("
    end: "\\)"
    patterns: [
      {
        include: "#code"
      }
    ]
  "primitive-arrays":
    patterns: [
      {
        match: "\\b(?:bool|double|float|unichar|char|uchar|int|uint|long|ulong|short|ushort|size_t|ssize_t|string|void|int8|int16|int32|int64|uint8|uint16|uint32|uint64)(\\[\\])*\\b"
        name: "storage.type.primitive.array.vala"
      }
    ]
  "primitive-types":
    patterns: [
      {
        comment: "var is not really a primitive, but acts like one in most cases"
        match: "\\b(?:var|bool|double|float|unichar|char|uchar|int|uint|long|ulong|short|ushort|size_t|ssize_t|string|void|signal|int8|int16|int32|int64|uint8|uint16|uint32|uint64)\\b"
        name: "storage.type.primitive.vala"
      }
    ]
  properties:
    patterns: [
      {
        # PROP1 in obj.PROP1.prop2, func().PROP1.prop2
        match: '(\\.)\\s*([A-Z][A-Z0-9_]*\\b\\$*)(?=\\s*\\.\\s*[a-zA-Z_][a-zA-Z0-9_]*)'
        captures:
          '1':
            name: 'punctuation.separator.property.period.vala'
          '2':
            name: 'constant.other.object.property.vala'
      }
      {
        # prop1 in obj.prop1.prop2, func().prop1.prop2
        match: '(\\.)\\s*(\\$*[a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\.\\s*[a-zA-Z_][a-zA-Z0-9_]*)'
        captures:
          '1':
            name: 'punctuation.separator.property.period.vala'
          '2':
            name: 'variable.other.object.property.vala'
      }
      {
        # PROP in obj.PROP, func().PROP
        match: '(\\.)\\s*([A-Z][A-Z0-9_$]*\\b\\$*)'
        captures:
          '1':
            name: 'punctuation.separator.property.period.vala'
          '2':
            name: 'constant.other.property.vala'
      }
      {
        # prop in obj.prop, func().prop
        match: '(?!.*[\\(])(\\.)\\s*(\\$*[a-zA-Z_][a-zA-Z0-9_]*)'
        captures:
          '1':
            name: 'punctuation.separator.property.period.vala'
          '2':
            name: 'variable.other.property.vala'
      }
      {
        # 123illegal in obj.123illegal, func().123illegal
        match: '(\\.)\\s*([0-9][a-zA-Z0-9_]*)'
        captures:
          '1':
            name: 'punctuation.separator.property.period.vala'
          '2':
            name: 'invalid.illegal.identifier.vala'
      }
    ]
  "storage-modifiers":
    captures:
      "1":
        name: "storage.modifier.vala"
    comment: "Not sure about unsafe and readonly"
    match: "\\b(public|private|protected|internal|static|final|sealed|virtual|override|abstract|readonly|volatile|dynamic|async|unsafe|out|ref|weak|owned|unowned|const)\\b"
  strings:
    patterns: [
      {
        begin: "@\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.vala"
        end: "\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.vala"
        name: "string.quoted.interpolated.vala"
        patterns: [
          {
            name: "constant.character.escape.vala"
            match: "\\\\."
          }
          {
            name: "constant.character.escape.vala"
            match: "\\$\\w+"
          }
          {
            begin: "(\\$\\()(([^)(]|\\(([^)(]|\\([^)]*\\))*\\))*)"
            beginCaptures:
              "1":
                name: "constant.character.escape.vala"
              "2":
                patterns: [
                  {
                    include: "#objects"
                  }
                  {
                    include: "#properties"
                  }
                  {
                    begin: "([\\~\\w]+)\\s*\\("
                    beginCaptures:
                      "1":
                        name: "entity.name.function.vala"
                    end: "\\)"
                    name: "meta.method.identifier.vala"
                    patterns: [
                      {
                        include: "#values"
                      }
                      {
                        include: "#parameters"
                      }
                    ]
                  }
                ]
            end: "\\)"
            endCaptures:
              "0":
                name: "constant.character.escape.vala"
          }
        ]
      }
      {
        begin: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.vala"
        end: "\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.vala"
        name: "string.quoted.double.vala"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.vala"
          }
          {
            match: "%[\\w\\.\\-]+"
            name: "constant.character.escape.vala"
          }
        ]
      }
      {
        begin: "'"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.vala"
        end: "'"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.vala"
        name: "string.quoted.single.vala"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.vala"
          }
        ]
      }
      {
        begin: "\"\"\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.vala"
        end: "\"\"\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.vala"
        name: "string.quoted.triple.vala"
        patterns: [
          {
            match: "%[\\w\\.\\-]+"
            name: "constant.character.escape.vala"
          }
        ]
      }
    ]
  throws:
    begin: "throws"
    beginCaptures:
      "0":
        name: "storage.modifier.vala"
    end: "(?={|;)"
    name: "meta.throwables.vala"
    patterns: [
      {
        include: "#object-types"
      }
    ]
  values:
    patterns: [
      {
        include: "#strings"
      }
      {
        include: "#object-types"
      }
      {
        include: "#constants-and-special-vars"
      }
      {
        include: "#anonymous-classes-and-new"
      }
    ]
scopeName: "source.vala"
